package tests;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.*;
import org.junit.jupiter.api.Test;

import verifiers.*;
// Generated by ComTest END

@SuppressWarnings({ "all" })
public class TimeFormatVerifierTest {
    @Test
    public void testVerify_ValidTimeFormat_ReturnsNull() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = "12:34";
        assertNull(verifier.verify(time));
    }

    @Test
    public void testVerify_InvalidTimeFormat_ReturnsErrorMessage() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = "1234";
        assertEquals("Provide the time in the format of XX:XX", verifier.verify(time));
    }
    
    @Test
    public void testVerify_MinimumValidTime_ReturnsNull() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = "00:00";
        assertNull(verifier.verify(time));
    }

    @Test
    public void testVerify_MaximumValidTime_ReturnsNull() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = "23:59";
        assertNull(verifier.verify(time));
    }

    @Test
    public void testVerify_DifferentValidTimeFormats_ReturnsNull() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String[] validTimes = {"01:23", "10:45", "15:00"};
        for (String time : validTimes) {
            assertNull(verifier.verify(time));
        }
    }

    @Test
    public void testVerify_InvalidHourRange_ReturnsErrorMessage() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = "24:00";
        assertEquals("Provide the time in the format of XX:XX", verifier.verify(time));
    }

    @Test
    public void testVerify_InvalidMinuteRange_ReturnsErrorMessage() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = "12:60";
        assertEquals("Provide the time in the format of XX:XX", verifier.verify(time));
    }

    @Test
    public void testVerify_MissingHourPart_ReturnsErrorMessage() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = ":34";
        assertEquals("Provide the time in the format of XX:XX", verifier.verify(time));
    }

    @Test
    public void testVerify_MissingMinutePart_ReturnsErrorMessage() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = "12:";
        assertEquals("Provide the time in the format of XX:XX", verifier.verify(time));
    }

    @Test
    public void testVerify_NonNumericCharacters_ReturnsErrorMessage() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String[] invalidTimes = {"1A:23", "12:3B"};
        for (String time : invalidTimes) {
            assertEquals("Provide the time in the format of XX:XX", verifier.verify(time));
        }
    }

    @Test
    public void testVerify_LeadingTrailingWhitespace_ReturnsErrorMessage() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String[] invalidTimes = {"  12:34", "12:34   "};
        for (String time : invalidTimes) {
            assertEquals("Provide the time in the format of XX:XX", verifier.verify(time));
        }
    }

    @Test
    public void testVerify_MultipleErrors_ReturnsErrorMessage() {
        TimeFormatVerifier verifier = new TimeFormatVerifier();
        String time = "24:60";
        assertEquals("Provide the time in the format of XX:XX", verifier.verify(time));
    }
}